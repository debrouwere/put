// Generated by CoffeeScript 1.8.0
(function() {
  var PathExp, finish, fs, noop, rejigger, types, _,
    __slice = [].slice;

  fs = require('fs');

  fs.path = require('path');

  fs.find = require('findit');

  fs.mkdirp = require('mkdirp');

  PathExp = require('simple-path-expressions').PathExp;

  _ = require('underscore');

  types = {
    images: ['png', 'gif', 'psd', 'jpg', 'jp2', 'tiff', 'tif', 'raw', 'bmp', 'webp'],
    documents: ['txt', 'doc', 'docx', 'odt', 'markdown', 'md', 'textile'],
    data: ['csv', 'json', 'xml', 'yaml', 'yml', 'hdf', 'log']
  };

  noop = function() {};

  finish = function() {
    var err, options, _i;
    options = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), err = arguments[_i++];
    options = options[0] || {};
    if (err) {
      if (options.strict) {
        throw err;
      } else {
        return console.log(err);
      }
    }
  };

  rejigger = function(operation, sourcePattern, destinationPattern, options, callback) {
    var destinationTemplate, finder, finishWithOptions, head, sourceTemplate;
    if (options == null) {
      options = {};
    }
    if (callback == null) {
      callback = noop;
    }
    sourceTemplate = new PathExp(fs.path.resolve(sourcePattern + '.<extension>'));
    destinationTemplate = new PathExp(fs.path.resolve(destinationPattern + '.<extension>'));
    head = fs.path.resolve(sourceTemplate.head);
    finder = fs.find(head);
    finishWithOptions = _.partial(finish, options);
    finder.on('file', function(source, stats) {
      var destination, directory, match;
      if (match = sourceTemplate.match(source)) {
        destination = destinationTemplate.fill(match);
        directory = fs.path.dirname(destination);
        return fs.exists(destination, function(exists) {
          if (!exists) {
            return fs.mkdirp(directory, function(err) {
              var stream;
              if (err) {
                throw err;
              }
              switch (operation) {
                case 'copy':
                  stream = fs.createReadStream(source);
                  stream.pipe(fs.createWriteStream(destination));
                  stream.on('finish', finishWithOptions);
                  break;
                case 'move':
                  fs.rename(source, destination, finishWithOptions);
                  break;
                case 'link':
                  fs.symlink(source, destination, finishWithOptions);
                  break;
                default:
                  throw new Error("Invalid operation. Got " + operation + ". Expected: copy, move or link.");
              }
              if (options.verbose) {
                return console.log("" + operation + " " + source + " -> " + destination);
              }
            });
          }
        });
      }
    });
    return finder.on('end', callback);
  };

  exports.copy = _.partial(rejigger, 'copy');

  exports.move = _.partial(rejigger, 'move');

  exports.link = _.partial(rejigger, 'link');

}).call(this);
